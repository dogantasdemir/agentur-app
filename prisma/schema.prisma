generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  REVIEW
  DONE
  ON_HOLD
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ActorType {
  CUSTOMER
  ADMIN
  SYSTEM
}

enum TargetType {
  ORGANIZATION
  REQUEST
  COMMENT
  ATTACHMENT
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accessLinks AccessLink[]
  requests    Request[]
  auditLogs   AuditLog[]

  @@unique([name])
}

model AccessLink {
  id             String    @id @default(cuid())
  organizationId String
  tokenHash      String    @unique
  expiresAt      DateTime?
  lastUsedAt     DateTime?
  active         Boolean   @default(true)
  createdAt      DateTime  @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([active])
  @@index([expiresAt])
}

model Request {
  id             String        @id @default(cuid())
  organizationId String
  title          String
  description    String
  status         RequestStatus @default(OPEN)
  priority       Priority      @default(MEDIUM)
  deadline       DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  comments     Comment[]
  attachments  Attachment[]

  @@index([organizationId, status])
  @@index([deadline])
  @@index([createdAt])
}

model Comment {
  id         String    @id @default(cuid())
  requestId  String
  authorType ActorType
  authorId   String?
  body       String
  createdAt  DateTime  @default(now())

  request Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  author  User?   @relation(fields: [authorId], references: [id])

  attachments Attachment[]

  @@index([requestId])
  @@index([authorType])
}

model Attachment {
  id         String   @id @default(cuid())
  requestId  String?
  commentId  String?
  storageKey String
  filename   String
  mime       String
  size       Int
  createdAt  DateTime @default(now())

  request Request? @relation(fields: [requestId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([commentId])
}

model AuditLog {
  id             String     @id @default(cuid())
  organizationId String
  actorType      ActorType
  actorId        String?
  action         String
  targetType     TargetType
  targetId       String
  metadata       Json?
  createdAt      DateTime   @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
}
